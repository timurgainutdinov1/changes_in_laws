import logging
import os
import uuid

import streamlit as st
import streamlit.components.v1 as components
from langchain_community.document_loaders import Docx2txtLoader, PyPDFLoader
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import PromptTemplate

# from langchain_gigachat import GigaChat
from langchain_community.chat_models import GigaChat
from io import BytesIO
from docx import Document
from docx.shared import Pt


def load_template(type):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è LLM.
    """
    if type == "changes":
        with open("prompt_changes.txt", "r", encoding="utf-8") as file:
            template = file.read()
    else:
        with open("prompt_new_federal_law.txt", "r", encoding="utf-8") as file:
            template = file.read()

    return template


def get_model(model_name: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–¥–µ–ª—å GigaChat –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏.

    Args:
        model_name (str): –ò–º—è –º–æ–¥–µ–ª–∏ GigaChat.

    Returns:
        str: –ò–º—è –º–æ–¥–µ–ª–∏ API GigaChat.
    """
    models = {
        "GigaChat-2": "GigaChat-2",
        "GigaChat-2-Pro": "GigaChat-2-Pro",
        "GigaChat-2-Max": "GigaChat-2-Max",
    }
    return models[model_name]


def create_files_upload_section():
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏/–≤–µ—Ä—Å–∏–∏ API.
    """
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞ GigaChat
    api_key = st.text_input(
        "üîë API –∫–ª—é—á GigaChat", type="password", help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á GigaChat"
    )
    st.session_state.api_key = api_key

    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    model_name = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å GigaChat",
        [
            "GigaChat-2 ‚ö°",
            "GigaChat-2-Pro ‚ö°‚ö°",
            "GigaChat-2-Max ‚ö°‚ö°‚ö°",
        ],
        index=0,
    )
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –∫–ª—é—á—É –¥–ª—è get_model
    model_key = model_name.split(" ")[0]
    st.session_state.model = get_model(model_key)

    # –í—ã–±–æ—Ä scope
    scope = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é API",
        [
            "GIGACHAT_API_PERS (–¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü)",
            "GIGACHAT_API_CORP (–¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü)",
            "GIGACHAT_API_B2B (–¥–ª—è –±–∏–∑–Ω–µ—Å–∞)",
        ],
        index=0,
    ).split(" ")[0]
    st.session_state.scope = scope

    changes = st.file_uploader(
        "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–Ω–∞ (—Å—Ç–∞—Ä–∞—è –∏ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏–∏)", ["pdf", "docx"]
    )
    new_federal_law = st.file_uploader(
        "üìù –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–æ–Ω –†–§", ["pdf", "docx"]
    )
    region_law = st.file_uploader(
        "üìù –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–∫–æ–Ω –ö—É—Ä–≥–∞–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏", ["pdf", "docx"]
    )
    return changes, new_federal_law, region_law


def save_file(file, name=None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.
    """
    unique_id = str(uuid.uuid4())
    file_name = f"{unique_id}_{name if name else file.name}"
    with open(file_name, "wb") as f:
        f.write(file.getbuffer())
    return file_name


def save_uploaded_files(files_to_save):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.
    """
    saved_files = {}
    for key, file in files_to_save.items():
        if file:
            saved_files[key] = save_file(file)
    return saved_files


def delete_files(files):
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.
    """
    try:
        for file in files:
            if file:
                os.remove(file)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}")


def extract_text_from_file(uploaded_file: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ PDF, DOCX.
    """
    try:
        if uploaded_file.endswith(".docx"):
            return Docx2txtLoader(uploaded_file).load()[0].page_content
        elif uploaded_file.endswith(".pdf"):
            return PyPDFLoader(uploaded_file, mode="single").load()[0].page_content
        return ""  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {uploaded_file}: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {uploaded_file}")
        return ""  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


def build_docx(text: str) -> BytesIO:
    doc = Document()
    style = doc.styles["Normal"]
    font = style.font
    font.name = "Times New Roman"
    font.size = Pt(12)

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
    for paragraph in text.strip().split("\n"):
        doc.add_paragraph(paragraph)

    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer


def main():
    logging.basicConfig(level=logging.INFO)

    st.title("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–∫–æ–Ω–∞—Ö")

    yandex_code = """
        <!-- Yandex.Metrika counter -->
        <script type="text/javascript">
            (function(m,e,t,r,i,k,a){
                m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
                m[i].l=1*new Date();
                for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
                k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)
            })(window, document,'script','https://mc.yandex.ru/metrika/tag.js?id=103796690', 'ym');
            ym(103796690, 'init', {ssr:true, webvisor:true, clickmap:true, ecommerce:"dataLayer", accurateTrackBounce:true, trackLinks:true});
        </script>
        <noscript><div><img src="https://mc.yandex.ru/watch/103796690" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
        <!-- /Yandex.Metrika counter -->
        """
    components.html(yandex_code, height=0)

    changes, new_federal_law, region_law = create_files_upload_section()

    start_check = st.button("üîç –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

    if start_check:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if not st.session_state.get("api_key"):
            st.error("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á GigaChat")
            return

        if (changes or new_federal_law) and region_law:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            files_to_save = {
                "changes": changes,
                "new_federal_law": new_federal_law,
                "region_law": region_law,
            }
            saved_files = save_uploaded_files(files_to_save)

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤
            changes_text = (
                extract_text_from_file(saved_files.get("changes", ""))
                if changes
                else ""
            )
            new_federal_law_text = (
                extract_text_from_file(saved_files.get("new_federal_law", ""))
                if new_federal_law
                else ""
            )
            region_law_text = (
                extract_text_from_file(saved_files.get("region_law", ""))
                if region_law
                else ""
            )

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è LLM
            if changes_text:
                prompt = PromptTemplate.from_template(load_template("changes"))
                input_dict = {"changes": changes_text, "region_law": region_law_text}
            else:
                prompt = PromptTemplate.from_template(load_template("new_federal_law"))
                input_dict = {
                    "new_federal_law": new_federal_law_text,
                    "region_law": region_law_text,
                }

            llm = GigaChat(
                model=st.session_state.model,
                credentials=st.session_state.api_key,
                scope=st.session_state.scope,
                verify_ssl_certs=False,
                temperature=0.1,
                top_p=0.8,
                timeout=1000,
                streaming=True,
            )

            chain = prompt | llm | StrOutputParser()

            output_spot = st.empty()
            partial = ""

            try:
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."):
                    for chunk in chain.stream(input_dict):
                        partial += chunk
                        output_spot.markdown(partial)
                st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞", divider=True)
                docx_file = build_docx(partial)
                st.download_button(
                    label="üíæ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ DOCX",
                    data=docx_file,
                    file_name="project_kurgan_changes.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                )
            except Exception as e:
                logging.error(f"–ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
                st.error("–ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

            finally:
                delete_files(saved_files.values())

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        elif region_law:
            msg = "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–Ω–∞ –∏–ª–∏ –Ω–æ–≤—ã–π –∑–∞–∫–æ–Ω –†–§"
            logging.error(msg)
            st.error(msg)
        elif changes or new_federal_law:
            msg = "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–æ–Ω –ö—É—Ä–≥–∞–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"
            logging.error(msg)
            st.error(msg)
        else:
            msg = "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–Ω–∞ –∏–ª–∏ –Ω–æ–≤—ã–π –∑–∞–∫–æ–Ω –†–§, –∞ —Ç–∞–∫–∂–µ –∑–∞–∫–æ–Ω –ö—É—Ä–≥–∞–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"
            logging.error(msg)
            st.error(msg)


if __name__ == "__main__":
    main()
